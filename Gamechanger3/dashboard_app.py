import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

# --- Configuration ---
# File paths for the cleaned data generated by gamechanger.py
CLEANED_DATA_FILE = "Final_Cleaned_Data.csv"
ADVANCED_STATS_FILE = "Final_Player_Advanced_Stats.csv"

# Set Streamlit page configuration
st.set_page_config(
    page_title="Rising Star Basketball Analytics Dashboard", # CHANGED: Added "Rising Star"
    page_icon="üèÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Define a custom color palette for teams
team_color_palette = {
    "Blue": "#1f77b4",   # A distinct blue
    "White": "#e0e0e0",  # Light grey for white team, visible against white background
    "Beige": "#d2b48c",  # Standard tan/beige
    "Black": "#333333",  # Dark grey/black
    "Grey": "#808080",   # Standard grey
}

# Define a specific palette for 'Your Selection' vs 'Opponent Selection' in plots where it's the hue
selection_comparison_palette = {
    "Your Selection": "#2ca02c",     # Green for your team
    "Opponent Selection": "#d62728"  # Red for opponent
}


# --- Data Loading Function ---
@st.cache_data
def load_data():
    """Loads the cleaned and advanced statistics data."""
    try:
        df_cleaned = pd.read_csv(CLEANED_DATA_FILE)
        df_advanced = pd.read_csv(ADVANCED_STATS_FILE)

        # Ensure 'Total_Games_Played' is integer in df_advanced for correct display
        if 'Total_Games_Played' in df_advanced.columns:
            # Fill NaN with 0 before converting to int to avoid errors if some players have no games recorded
            df_advanced['Total_Games_Played'] = df_advanced['Total_Games_Played'].fillna(0).astype(int)

        return df_cleaned, df_advanced
    except FileNotFoundError as e:
        st.error(f"Error: Data file not found. Please ensure '{CLEANED_DATA_FILE}' and '{ADVANCED_STATS_FILE}' are in the same directory as this script. Run 'gamechanger.py' first to generate these files. Details: {e}")
        return pd.DataFrame(), pd.DataFrame()

# Load the dataframes
df_cleaned, df_advanced = load_data()

# Check if data loaded successfully
if df_cleaned.empty or df_advanced.empty:
    st.stop() # Stop the app if data couldn't be loaded

# Ensure 'Player_Team_Label' exists in df_cleaned for consistency
if 'Player_Team_Label' not in df_cleaned.columns:
    df_cleaned['Player_Team_Label'] = df_cleaned.apply(
        lambda row: f"Player {row['Player No.']} ({row['Team']})" if pd.notna(row['Team']) else str(row['Player No.']),
        axis=1
    )

# Ensure 'Player_Team_Label' is in df_advanced for filtering and display
# This ensures it's available for player selection and data joining
if 'Player_Team_Label' not in df_advanced.columns:
    st.error("Error: 'Player_Team_Label' column not found in advanced stats data. Please ensure gamechanger.py generates this column.")
    st.stop()


# --- Dashboard Title ---
st.title("üèÄ Rising Star Basketball Analytics Dashboard") # CHANGED: Added "Rising Star"
st.markdown("Analyze player and team performance from game box scores.")

# CHANGED: Added Coach greeting and league clarity
st.header("Welcome, Coach!")
st.write("""
This dashboard provides an in-depth look into player and team performance across the **Rising Star** league.
Use the sections below to explore key statistics and visualize trends from the game box scores.
""")
st.markdown("---") # Added a separator for clarity

# --- Sidebar Filters ---
st.sidebar.header("Your Team/Player")

# Team selection filter for the primary team
all_teams = ['All Teams'] + sorted(df_cleaned['Team'].unique().tolist())
selected_team = st.sidebar.selectbox("Select Your Team", all_teams, key='your_team')

# Player selection filter (dynamic based on selected team)
if selected_team == 'All Teams':
    all_players_your = ['All Players'] + sorted(df_cleaned['Player No.'].unique().tolist())
else:
    team_players_your = df_cleaned[df_cleaned['Team'] == selected_team]['Player No.'].unique()
    all_players_your = ['All Players'] + sorted(team_players_your.tolist())
selected_player_no = st.sidebar.selectbox("Select Your Player Number", all_players_your, key='your_player')


st.sidebar.markdown("---")
st.sidebar.header("Opponent Team/Player (Optional)")

# Team selection filter for the opponent team
# Exclude the selected_team if it's not 'All Teams' to prevent self-comparison
opponent_teams_options = ['No Opponent'] + [team for team in all_teams if team != selected_team]
selected_opponent_team = st.sidebar.selectbox("Select Opponent Team", opponent_teams_options, key='opponent_team')

# Player selection filter for the opponent player
opponent_players_options = ['No Opponent']
default_opponent_player_index = 0 # Default to 'No Opponent'

if selected_opponent_team != 'No Opponent':
    if selected_opponent_team == 'All Teams':
        team_players_opponent_list = sorted(df_cleaned['Player No.'].unique().tolist())
    else:
        team_players_opponent_list = sorted(df_cleaned[df_cleaned['Team'] == selected_opponent_team]['Player No.'].unique().tolist())

    # Always include 'All Players' if an opponent team is selected
    opponent_players_options = ['No Opponent', 'All Players'] + team_players_opponent_list
    
    # Set default index to 'All Players' (index 1) if an opponent team is selected
    default_opponent_player_index = 1
else:
    # If no opponent team is selected, only 'No Opponent' is an option, default index 0
    opponent_players_options = ['No Opponent']
    default_opponent_player_index = 0

selected_opponent_player_no = st.sidebar.selectbox(
    "Select Opponent Player Number",
    opponent_players_options,
    index=default_opponent_player_index,
    key='opponent_player'
)


# --- Main Content Area ---

# Filter dataframes based on sidebar selections for Primary Team/Player
filtered_df_cleaned_primary = df_cleaned.copy()
filtered_df_advanced_primary = df_advanced.copy()

if selected_team != 'All Teams':
    filtered_df_cleaned_primary = filtered_df_cleaned_primary[filtered_df_cleaned_primary['Team'] == selected_team]
    filtered_df_advanced_primary = filtered_df_advanced_primary[filtered_df_advanced_primary['Team'] == selected_team]

if selected_player_no != 'All Players':
    filtered_df_cleaned_primary = filtered_df_cleaned_primary[filtered_df_cleaned_primary['Player No.'] == selected_player_no]
    filtered_df_advanced_primary = filtered_df_advanced_primary[filtered_df_advanced_primary['Player No.'] == selected_player_no]


# Filter dataframes based on sidebar selections for Opponent Team/Player
filtered_df_cleaned_opponent = pd.DataFrame()
filtered_df_advanced_opponent = pd.DataFrame()

if selected_opponent_team != 'No Opponent':
    filtered_df_cleaned_opponent = df_cleaned.copy()
    filtered_df_advanced_opponent = df_advanced.copy()

    if selected_opponent_team != 'All Teams':
        filtered_df_cleaned_opponent = filtered_df_cleaned_opponent[filtered_df_cleaned_opponent['Team'] == selected_opponent_team]
        filtered_df_advanced_opponent = filtered_df_advanced_opponent[filtered_df_advanced_opponent['Team'] == selected_opponent_team]

    if selected_opponent_player_no != 'No Opponent' and selected_opponent_player_no != 'All Players':
        filtered_df_cleaned_opponent = filtered_df_cleaned_opponent[filtered_df_cleaned_opponent['Player No.'] == selected_opponent_player_no]
        filtered_df_advanced_opponent = filtered_df_advanced_opponent[filtered_df_advanced_opponent['Player No.'] == selected_opponent_player_no]
    elif selected_opponent_player_no == 'No Opponent' and selected_opponent_team == 'All Teams':
        # If opponent team is 'All Teams' but no specific player is selected, keep all players for 'All Teams'
        pass
    elif selected_opponent_player_no == 'All Players' and selected_opponent_team != 'All Teams':
        # If opponent player is 'All Players' but specific team is selected
        filtered_df_cleaned_opponent = filtered_df_cleaned_opponent[filtered_df_cleaned_opponent['Team'] == selected_opponent_team]
        filtered_df_advanced_opponent = filtered_df_advanced_opponent[filtered_df_advanced_opponent['Team'] == selected_opponent_team]
    elif selected_opponent_player_no == 'All Players' and selected_opponent_team == 'All Teams':
        # If both are 'All', keep everything (already handled by initial copy)
        pass


# --- Summary Statistics ---
st.header("Overall Performance Summary")

col1_summary, col2_summary = st.columns(2)

with col1_summary:
    st.subheader(f"Your Selection: {selected_team} ({selected_player_no})")
    if not filtered_df_cleaned_primary.empty:
        total_pts_primary = filtered_df_cleaned_primary['PTS'].sum()
        total_reb_primary = filtered_df_cleaned_primary['REB'].sum()
        total_ast_primary = filtered_df_cleaned_primary['AST'].sum()
        avg_efficiency_primary = filtered_df_cleaned_primary['Efficiency'].mean()
        avg_ts_pct_primary = filtered_df_advanced_primary['Avg_TS_Percentage'].mean() if not filtered_df_advanced_primary.empty and 'Avg_TS_Percentage' in filtered_df_advanced_primary.columns else 0
        
        st.metric("Total Points", f"{total_pts_primary:.0f}")
        st.metric("Total Rebounds", f"{total_reb_primary:.0f}")
        st.metric("Total Assists", f"{total_ast_primary:.0f}")
        st.metric("Average Efficiency", f"{avg_efficiency_primary:.2f}")
        st.metric("Average True Shooting %", f"{avg_ts_pct_primary:.2f}%")
    else:
        st.info("No data available for your selection.")

if selected_opponent_team != 'No Opponent':
    with col2_summary:
        st.subheader(f"Opponent Selection: {selected_opponent_team} ({selected_opponent_player_no})")
        if not filtered_df_cleaned_opponent.empty:
            total_pts_opponent = filtered_df_cleaned_opponent['PTS'].sum()
            total_reb_opponent = filtered_df_cleaned_opponent['REB'].sum()
            total_ast_opponent = filtered_df_cleaned_opponent['AST'].sum()
            avg_efficiency_opponent = filtered_df_cleaned_opponent['Efficiency'].mean()
            avg_ts_pct_opponent = filtered_df_advanced_opponent['Avg_TS_Percentage'].mean() if not filtered_df_advanced_opponent.empty and 'Avg_TS_Percentage' in filtered_df_advanced_opponent.columns else 0
            
            st.metric("Total Points", f"{total_pts_opponent:.0f}")
            st.metric("Total Rebounds", f"{total_reb_opponent:.0f}")
            st.metric("Total Assists", f"{total_ast_opponent:.0f}")
            st.metric("Average Efficiency", f"{avg_efficiency_opponent:.2f}")
            st.metric("Average True Shooting %", f"{avg_ts_pct_opponent:.2f}%")
        else:
            st.info("No data available for opponent selection.")
else:
    # If no opponent selected, the second column remains empty or can be filled with a placeholder
    with col2_summary:
        st.subheader("No Opponent Selected")
        st.info("Select an opponent team/player from the sidebar for comparison.")

st.subheader("Team-wise Averages (Per Player Per Game)")
if not filtered_df_cleaned_primary.empty:
    team_avg_stats_primary = filtered_df_cleaned_primary.groupby('Team')[['PTS', 'REB', 'AST', 'Efficiency']].mean().reset_index()
    
    # Calculate Total_Games_Played for each team based on games in the *filtered* data
    # This ensures the games counted are relevant to the selected team(s) in the dashboard context.
    team_games_played = filtered_df_cleaned_primary.groupby('Team')['Game'].nunique().reset_index()
    team_games_played.rename(columns={'Game': 'Total_Games_Played'}, inplace=True)

    # Merge team_avg_stats_primary with team_games_played
    team_avg_stats_with_games = pd.merge(team_avg_stats_primary, team_games_played, on='Team', how='left')

    st.dataframe(team_avg_stats_with_games.set_index('Team').style.format({
        'PTS': "{:.2f}", 
        'REB': "{:.2f}", 
        'AST': "{:.2f}", 
        'Efficiency': "{:.2f}", 
        'Total_Games_Played': "{:.0f}" # Format as integer
    }))
else:
    st.info("No data available for team-wise averages based on current filters.")


# --- Player Advanced Statistics Table ---
st.header("Player Advanced Statistics")

# Check for Player vs. Player Comparison
if selected_player_no != 'All Players' and selected_opponent_player_no != 'All Players' and selected_player_no != 'No Opponent' and selected_opponent_player_no != 'No Opponent':
    st.subheader("Player vs. Player Comparison")
    col_player1, col_player2 = st.columns(2)

    with col_player1:
        st.markdown(f"**Your Player: {selected_player_no} ({selected_team})**")
        if not filtered_df_advanced_primary.empty:
            display_cols = [
                'Total_Games_Played',
                'Avg_AST_TOV_Ratio', 'Avg_TS_Percentage', 'Avg_REB_Percentage',
                'Avg_Efficiency', 'Avg_WS_Simplified', 'Avg_VORP_Simplified' # Added WS and VORP
            ]
            player1_stats = filtered_df_advanced_primary[display_cols].T.reset_index()
            player1_stats.columns = ['Metric', 'Value']
            st.dataframe(player1_stats.style.format({
                'Value': "{:.2f}",
                # Ensure Total_Games_Played is formatted as integer here too
                'Total_Games_Played': "{:.0f}"
            }))
        else:
            st.info("No advanced stats for your player.")

    with col_player2: # Corrected variable name
        st.markdown(f"**Opponent Player: {selected_opponent_player_no} ({selected_opponent_team})**")
        if not filtered_df_advanced_opponent.empty:
            display_cols = [
                'Total_Games_Played',
                'Avg_AST_TOV_Ratio', 'Avg_TS_Percentage', 'Avg_REB_Percentage',
                'Avg_Efficiency', 'Avg_WS_Simplified', 'Avg_VORP_Simplified' # Added WS and VORP
            ]
            player2_stats = filtered_df_advanced_opponent[display_cols].T.reset_index()
            player2_stats.columns = ['Metric', 'Value']
            st.dataframe(player2_stats.style.format({
                'Value': "{:.2f}",
                # Ensure Total_Games_Played is formatted as integer here too
                'Total_Games_Played': "{:.0f}"
            }))
        else:
            st.info("No advanced stats for opponent player.")
# Check for Team vs. Team Comparison
elif (selected_team != 'All Teams' and selected_player_no == 'All Players' and
      selected_opponent_team != 'No Opponent' and selected_opponent_player_no == 'All Players'):
    st.subheader("Team vs. Team Comparison (Average Player Stats)")
    col_team1, col_team2 = st.columns(2) # Correctly defined col_team1 and col_team2 here

    with col_team1:
        st.markdown(f"**Your Team: {selected_team} (All Players)**")
        if not filtered_df_advanced_primary.empty:
            # Calculate average of advanced stats for the primary team's players
            team1_avg_advanced_stats = filtered_df_advanced_primary.mean(numeric_only=True).to_frame().reset_index()
            team1_avg_advanced_stats.columns = ['Metric', 'Value']
            
            # Filter to display only relevant metrics
            display_metrics = [
                # 'Total_Games_Played', # Removed from team comparison display
                'Avg_AST_TOV_Ratio', 'Avg_TS_Percentage', 'Avg_REB_Percentage',
                'Avg_Efficiency', 'Avg_WS_Simplified', 'Avg_VORP_Simplified' # Added WS and VORP
            ]
            team1_avg_advanced_stats = team1_avg_advanced_stats[team1_avg_advanced_stats['Metric'].isin(display_metrics)]

            # Format the values
            team1_avg_advanced_stats_formatted = team1_avg_advanced_stats.copy()
            for index, row in team1_avg_advanced_stats_formatted.iterrows():
                if row['Metric'] in ['Avg_TS_Percentage', 'Avg_REB_Percentage']:
                    team1_avg_advanced_stats_formatted.at[index, 'Value'] = f"{row['Value']:.2f}%"
                # Removed from team comparison formatting
                # elif row['Metric'] == 'Total_Games_Played':
                    # team1_avg_advanced_stats_formatted.at[index, 'Value'] = f"{int(row['Value'])}"
                else:
                    team1_avg_advanced_stats_formatted.at[index, 'Value'] = f"{row['Value']:.2f}"
            
            st.dataframe(team1_avg_advanced_stats_formatted.set_index('Metric'))
        else:
            st.info("No advanced stats for your team.")

    with col_team2: # Corrected variable name
        st.markdown(f"**Opponent Team: {selected_opponent_team} (All Players)**")
        if not filtered_df_advanced_opponent.empty:
            # Calculate average of advanced stats for the opponent team's players
            team2_avg_advanced_stats = filtered_df_advanced_opponent.mean(numeric_only=True).to_frame().reset_index()
            team2_avg_advanced_stats.columns = ['Metric', 'Value']
            
            # Filter to display only relevant metrics
            display_metrics = [
                # 'Total_Games_Played', # Removed from team comparison display
                'Avg_AST_TOV_Ratio', 'Avg_TS_Percentage', 'Avg_REB_Percentage',
                'Avg_Efficiency', 'Avg_WS_Simplified', 'Avg_VORP_Simplified' # Added WS and VORP
            ]
            team2_avg_advanced_stats = team2_avg_advanced_stats[team2_avg_advanced_stats['Metric'].isin(display_metrics)]

            # Format the values
            team2_avg_advanced_stats_formatted = team2_avg_advanced_stats.copy()
            for index, row in team2_avg_advanced_stats_formatted.iterrows():
                if row['Metric'] in ['Avg_TS_Percentage', 'Avg_REB_Percentage']:
                    team2_avg_advanced_stats_formatted.at[index, 'Value'] = f"{row['Value']:.2f}%"
                # Removed from team comparison formatting
                # elif row['Metric'] == 'Total_Games_Played':
                    # team2_avg_advanced_stats_formatted.at[index, 'Value'] = f"{int(row['Value'])}"
                else:
                    team2_avg_advanced_stats_formatted.at[index, 'Value'] = f"{row['Value']:.2f}"

            st.dataframe(team2_avg_advanced_stats_formatted.set_index('Metric'))
        else:
            st.info("No advanced stats for opponent team.")
# Default display when no specific comparison is active
elif not filtered_df_advanced_primary.empty:
    st.subheader(f"Advanced Statistics for {selected_team} ({selected_player_no})")
    display_cols = [
        'Player No.', 'Team', 'Total_Games_Played',
        'Avg_AST_TOV_Ratio', 'Avg_TS_Percentage', 'Avg_REB_Percentage',
        'Avg_Efficiency', 'Avg_WS_Simplified', 'Avg_VORP_Simplified' # Added WS and VORP
    ]
    filtered_display_cols = [col for col in display_cols if col in filtered_df_advanced_primary.columns]
    st.dataframe(
        filtered_df_advanced_primary[filtered_display_cols].style.format({
            'Total_Games_Played': "{:.0f}", # Format as integer for games played
            'Avg_AST_TOV_Ratio': "{:.2f}",
            'Avg_TS_Percentage': "{:.2f}%",
            'Avg_REB_Percentage': "{:.2f}%",
            'Avg_Efficiency': "{:.2f}",
            'Avg_WS_Simplified': "{:.2f}", # Format for WS
            'Avg_VORP_Simplified': "{:.2f}" # Format for VORP
        })
    )
else:
    st.info("No advanced player statistics available based on current filters.")


# --- Visualizations ---
st.header("Key Visualizations")

# Re-generate plots using filtered data directly in Streamlit
sns.set_style("whitegrid")
plt.rcParams["figure.figsize"] = (12, 7) # Set a default figure size for consistency

# Helper function to combine data for plotting comparisons
def get_combined_plot_data(df1, df2, label1, label2, plot_type='cleaned'):
    if plot_type == 'cleaned':
        cols = ['Player No.', 'Team', 'Efficiency', 'FG_PCT', 'AST', 'TOV', 'Player_Team_Label']
    else: # advanced
        cols = ['Player No.', 'Team', 'Avg_Efficiency', 'Avg_TS_Percentage', 'Avg_REB_Percentage', 'Avg_AST_TOV_Ratio', 'Player_Team_Label', 'Avg_WS_Simplified', 'Avg_VORP_Simplified'] # Added WS and VORP
    
    # Filter for relevant columns
    df1_plot = df1[[col for col in cols if col in df1.columns]].copy()
    df2_plot = df2[[col for col in cols if col in df2.columns]].copy()

    if not df1_plot.empty:
        df1_plot['Selection_Type'] = label1
    if not df2_plot.empty:
        df2_plot['Selection_Type'] = label2

    combined_df = pd.DataFrame()
    if not df1_plot.empty:
        combined_df = pd.concat([combined_df, df1_plot], ignore_index=True)
    if not df2_plot.empty:
        combined_df = pd.concat([combined_df, df2_plot], ignore_index=True)
    
    # Ensure Player_Team_Label for combined view if not already there or for single selections
    if 'Player_Team_Label' not in combined_df.columns and 'Player No.' in combined_df.columns and 'Team' in combined_df.columns:
         combined_df['Player_Team_Label'] = combined_df.apply(
            lambda row: f"Player {row['Player No.']} ({row['Team']})" if pd.notna(row['Team']) else str(row['Player No.']),
            axis=1
        )
    return combined_df

# Determine the dataframes to use for plotting based on selection
if selected_opponent_team != 'No Opponent' or (selected_opponent_player_no != 'No Opponent' and selected_opponent_player_no != 'All Players'):
    plot_data_cleaned = get_combined_plot_data(filtered_df_cleaned_primary, filtered_df_cleaned_opponent, "Your Selection", "Opponent Selection", 'cleaned')
    plot_data_advanced = get_combined_plot_data(filtered_df_advanced_primary, filtered_df_advanced_opponent, "Your Selection", "Opponent Selection", 'advanced')
else:
    plot_data_cleaned = filtered_df_cleaned_primary.copy()
    plot_data_cleaned['Selection_Type'] = "Your Selection" # Add this for consistent hue if needed
    plot_data_advanced = filtered_df_advanced_primary.copy()
    plot_data_advanced['Selection_Type'] = "Your Selection"


# 1. Player Efficiency Distribution by Team (Box Plot / Violin Plot for comparison)
st.subheader("Efficiency Distribution")
if 'Team' in plot_data_cleaned.columns and 'Efficiency' in plot_data_cleaned.columns and not plot_data_cleaned.empty:
    fig_eff_team, ax_eff_team = plt.subplots(figsize=(10, 6))
    
    # Determine if we're in a 'Your Selection' vs 'Opponent Selection' comparison scenario (for players or teams)
    is_comparison_mode = (selected_opponent_team != 'No Opponent' and \
                          ((selected_player_no == 'All Players' and selected_opponent_player_no == 'All Players') or \
                           (selected_player_no != 'All Players' and selected_opponent_player_no != 'All Players' and selected_player_no != 'No Opponent' and selected_opponent_player_no != 'No Opponent')))

    if is_comparison_mode:
        # Filter to only include the relevant teams for the x-axis, if specific teams are selected
        if selected_team != 'All Teams' and selected_opponent_team != 'All Teams':
             filtered_for_plot = plot_data_cleaned[(plot_data_cleaned['Team'] == selected_team) | (plot_data_cleaned['Team'] == selected_opponent_team)].copy()
        else: # If one or both are 'All Teams', show all relevant teams in comparison
            filtered_for_plot = plot_data_cleaned.copy()
            
        sns.violinplot(x='Team', y='Efficiency', hue='Selection_Type', data=filtered_for_plot, palette=selection_comparison_palette, ax=ax_eff_team, split=True, inner="quartile")
        ax_eff_team.set_title(f'Player Efficiency Distribution: {selected_team} vs {selected_opponent_team}') # More specific title
        ax_eff_team.legend(title="Selection Type")
    else:
        # Default view: show distribution by individual teams using their colors
        sns.boxplot(x='Team', y='Efficiency', data=plot_data_cleaned, palette=team_color_palette, ax=ax_eff_team)
        ax_eff_team.set_title('Player Efficiency Distribution by Team')
    
    ax_eff_team.set_xlabel('Team')
    ax_eff_team.set_ylabel('Efficiency Rating')
    plt.xticks(rotation=45, ha='right')
    st.pyplot(fig_eff_team)
    plt.close(fig_eff_team)
else:
    st.info("Insufficient data to generate Efficiency Distribution plot.")

# 2. Top 10 Players by Average Efficiency (Bar Chart, Team-Specific) - Now supporting comparison
st.subheader("Top Players by Average Efficiency")
if 'Player_Team_Label' in plot_data_advanced.columns and 'Avg_Efficiency' in plot_data_advanced.columns and not plot_data_advanced.empty:
    # Ensure numerical stability for plotting
    plot_data_advanced['Avg_Efficiency'] = pd.to_numeric(plot_data_advanced['Avg_Efficiency'], errors='coerce').fillna(0)

    # If comparing specific players/teams, just plot the relevant ones
    if (selected_player_no != 'All Players' and selected_player_no != 'No Opponent') or (selected_opponent_player_no != 'All Players' and selected_opponent_player_no != 'No Opponent'):
        # Filter for only the selected player(s) if specific players are chosen
        players_to_plot = plot_data_advanced[
            ((plot_data_advanced['Player No.'] == selected_player_no) & (plot_data_advanced['Team'] == selected_team)) |
            ((plot_data_advanced['Player No.'] == selected_opponent_player_no) & (plot_data_advanced['Team'] == selected_opponent_team))
        ].copy()
        title_suffix = "(Selected Players Comparison)"
    else:
        players_to_plot = plot_data_advanced.sort_values(by='Avg_Efficiency', ascending=False).head(10)
        title_suffix = "(Overall Top 10, Team-Specific)"

    if not players_to_plot.empty:
        fig_top_eff, ax_top_eff = plt.subplots(figsize=(12, 7))
        if (selected_player_no != 'All Players' and selected_player_no != 'No Opponent') or \
           (selected_opponent_player_no != 'All Players' and selected_opponent_player_no != 'No Opponent'):
            # When comparing specific players, hue is Selection_Type. Use the selection_comparison_palette.
            sns.barplot(x='Player_Team_Label', y='Avg_Efficiency', hue='Selection_Type', data=players_to_plot, palette=selection_comparison_palette, ax=ax_top_eff)
            ax_top_eff.set_xlabel('Player (Team)')
        else:
            # When showing overall top N, hue is Team. Use team_color_palette.
            sns.barplot(x='Player No.', y='Avg_Efficiency', hue='Team', data=players_to_plot, palette=team_color_palette, dodge=True, ax=ax_top_eff)
            ax_top_eff.set_xlabel('Player Number')

        ax_top_eff.set_title(f'Top Players by Average Efficiency {title_suffix}')
        ax_top_eff.set_ylabel('Average Efficiency Rating')
        plt.xticks(rotation=45, ha='right')
        ax_top_eff.legend(title="Team/Selection", bbox_to_anchor=(1.05, 1), loc='upper left')
        st.pyplot(fig_top_eff)
        plt.close(fig_top_eff)
    else:
        st.info(f"Insufficient data to generate Top Players by Average Efficiency plot {title_suffix}.")
else:
    st.info("Required columns for Top Players by Average Efficiency plot are missing or data is empty.")


# 4. Top 10 Players by Average True Shooting Percentage (TS%)
st.subheader("Top Players by Average True Shooting Percentage (TS%)")
if 'Player_Team_Label' in plot_data_advanced.columns and 'Avg_TS_Percentage' in plot_data_advanced.columns and not plot_data_advanced.empty:
    plot_data_advanced['Avg_TS_Percentage'] = pd.to_numeric(plot_data_advanced['Avg_TS_Percentage'], errors='coerce').fillna(0)

    if (selected_player_no != 'All Players' and selected_player_no != 'No Opponent') or (selected_opponent_player_no != 'All Players' and selected_opponent_player_no != 'No Opponent'):
        players_to_plot = plot_data_advanced[
            ((plot_data_advanced['Player No.'] == selected_player_no) & (plot_data_advanced['Team'] == selected_team)) |
            ((plot_data_advanced['Player No.'] == selected_opponent_player_no) & (plot_data_advanced['Team'] == selected_opponent_team))
        ].copy()
        title_suffix = "(Selected Players Comparison)"
    else:
        players_to_plot = plot_data_advanced.sort_values(by='Avg_TS_Percentage', ascending=False).head(10)
        title_suffix = "(Overall Top 10, Team-Specific)"

    if not players_to_plot.empty:
        fig_ts, ax_ts = plt.subplots(figsize=(12, 7))
        if (selected_player_no != 'All Players' and selected_player_no != 'No Opponent') or \
           (selected_opponent_player_no != 'All Players' and selected_opponent_player_no != 'No Opponent'):
            sns.barplot(x='Player_Team_Label', y='Avg_TS_Percentage', hue='Selection_Type', data=players_to_plot, palette=selection_comparison_palette, ax=ax_ts)
            ax_ts.set_xlabel('Player (Team)')
        else:
            sns.barplot(x='Player No.', y='Avg_TS_Percentage', hue='Team', data=players_to_plot, palette=team_color_palette, dodge=True, ax=ax_ts)
            ax_ts.set_xlabel('Player Number')
        
        ax_ts.set_title(f'Top Players by Average True Shooting Percentage {title_suffix}')
        ax_ts.set_ylabel('Average TS%')
        plt.xticks(rotation=45, ha='right')
        ax_ts.legend(title="Team/Selection", bbox_to_anchor=(1.05, 1), loc='upper left')
        st.pyplot(fig_ts)
        plt.close(fig_ts)
    else:
        st.info(f"No data available to generate Top Players by Average True Shooting Percentage plot {title_suffix}.")
else:
    st.info("Required columns for Top Players by Average True Shooting Percentage plot are missing or data is empty.")


# 5. Top 10 Players by Average Assist-to-Turnover Ratio
st.subheader("Top Players by Average Assist-to-Turnover Ratio")
if 'Player_Team_Label' in plot_data_advanced.columns and 'Avg_AST_TOV_Ratio' in plot_data_advanced.columns and not plot_data_advanced.empty:
    plot_data_advanced['Avg_AST_TOV_Ratio'] = pd.to_numeric(plot_data_advanced['Avg_AST_TOV_Ratio'], errors='coerce').fillna(0)
    
    if (selected_player_no != 'All Players' and selected_player_no != 'No Opponent') or (selected_opponent_player_no != 'All Players' and selected_opponent_player_no != 'No Opponent'):
        players_with_ast_tov = plot_data_advanced[
            ((plot_data_advanced['Player No.'] == selected_player_no) & (plot_data_advanced['Team'] == selected_team)) |
            ((plot_data_advanced['Player No.'] == selected_opponent_player_no) & (plot_data_advanced['Team'] == selected_opponent_team))
        ].copy()
        title_suffix = "(Selected Players Comparison)"
    else:
        # Filter out players with NaN or 0 AST/TOV ratio to focus on meaningful values
        players_with_ast_tov = plot_data_advanced[plot_data_advanced['Avg_AST_TOV_Ratio'].notna() &
                                                  (plot_data_advanced['Avg_AST_TOV_Ratio'] != 0)].copy()
        title_suffix = "(Overall Top 10, Team-Specific)"

    top_ast_tov_players = players_with_ast_tov.sort_values(by='Avg_AST_TOV_Ratio', ascending=False).head(10)

    if not top_ast_tov_players.empty:
        fig_ast_tov, ax_ast_tov = plt.subplots(figsize=(12, 7))
        if (selected_player_no != 'All Players' and selected_player_no != 'No Opponent') or \
           (selected_opponent_player_no != 'All Players' and selected_opponent_player_no != 'No Opponent'):
            sns.barplot(x='Player_Team_Label', y='Avg_AST_TOV_Ratio', hue='Selection_Type', data=top_ast_tov_players, palette=selection_comparison_palette, ax=ax_ast_tov)
            ax_ast_tov.set_xlabel('Player (Team)')
        else:
            sns.barplot(x='Player No.', y='Avg_AST_TOV_Ratio', hue='Team', data=top_ast_tov_players, palette=team_color_palette, dodge=True, ax=ax_ast_tov)
            ax_ast_tov.set_xlabel('Player Number')
        
        ax_ast_tov.set_title(f'Top Players by Average Assist-to-Turnover Ratio {title_suffix}')
        ax_ast_tov.set_ylabel('Average AST/TOV Ratio')
        plt.xticks(rotation=45, ha='right')
        ax_ast_tov.legend(title="Team/Selection", bbox_to_anchor=(1.05, 1), loc='upper left')
        st.pyplot(fig_ast_tov)
        plt.close(fig_ast_tov)
    else:
        st.info(f"No data available to generate Top Players by Average Assist-to-Turnover Ratio plot {title_suffix} (filtered out 0s/NaNs).")
else:
    st.info("Required columns for Top Players by Average Assist-to-Turnover Ratio plot are missing or data is empty.")


# 6. Top 10 Players by Average Rebounding Percentage
st.subheader("Top Players by Average Rebounding Percentage")
if 'Player_Team_Label' in plot_data_advanced.columns and 'Avg_REB_Percentage' in plot_data_advanced.columns and not plot_data_advanced.empty:
    plot_data_advanced['Avg_REB_Percentage'] = pd.to_numeric(plot_data_advanced['Avg_REB_Percentage'], errors='coerce').fillna(0)

    if (selected_player_no != 'All Players' and selected_player_no != 'No Opponent') or (selected_opponent_player_no != 'All Players' and selected_opponent_player_no != 'No Opponent'):
        top_reb_pct_players = plot_data_advanced[
            ((plot_data_advanced['Player No.'] == selected_player_no) & (plot_data_advanced['Team'] == selected_team)) |
            ((plot_data_advanced['Player No.'] == selected_opponent_player_no) & (plot_data_advanced['Team'] == selected_opponent_team))
        ].copy()
        title_suffix = "(Selected Players Comparison)"
    else:
        top_reb_pct_players = plot_data_advanced.sort_values(by='Avg_REB_Percentage', ascending=False).head(10)
        title_suffix = "(Overall Top 10, Team-Specific)"

    if not top_reb_pct_players.empty:
        fig_reb_pct, ax_reb_pct = plt.subplots(figsize=(12, 7))
        if (selected_player_no != 'All Players' and selected_player_no != 'No Opponent') or \
           (selected_opponent_player_no != 'All Players' and selected_opponent_player_no != 'No Opponent'):
            sns.barplot(x='Player_Team_Label', y='Avg_REB_Percentage', hue='Selection_Type', data=top_reb_pct_players, palette=selection_comparison_palette, ax=ax_reb_pct)
            ax_reb_pct.set_xlabel('Player (Team)')
        else:
            sns.barplot(x='Player No.', y='Avg_REB_Percentage', hue='Team', data=top_reb_pct_players, palette=team_color_palette, dodge=True, ax=ax_reb_pct)
            ax_reb_pct.set_xlabel('Player Number')
        
        ax_reb_pct.set_title(f'Top Players by Average Rebounding Percentage {title_suffix}')
        ax_reb_pct.set_ylabel('Average Rebounding Percentage')
        plt.xticks(rotation=45, ha='right')
        ax_reb_pct.legend(title="Team", bbox_to_anchor=(1.05, 1), loc='upper left')
        st.pyplot(fig_reb_pct)
        plt.close(fig_reb_pct)
    else:
        st.info(f"No data available to generate Top Players by Average Rebounding Percentage plot {title_suffix}.")
else:
    st.info("Required columns for Top Players by Average Rebounding Percentage plot are missing or data is empty.")

# 7. Top 10 Players by Average Field Goal Percentage (from df_cleaned)
st.subheader("Top Players by Average Field Goal Percentage")
if 'Player_Team_Label' in plot_data_cleaned.columns and 'FG_PCT' in plot_data_cleaned.columns and not plot_data_cleaned.empty:
    plot_data_cleaned['FG_PCT'] = pd.to_numeric(plot_data_cleaned['FG_PCT'], errors='coerce').fillna(0)

    # Calculate average FG_PCT per player (Player_Team_Label)
    avg_fg_pct_per_player = plot_data_cleaned.groupby(['Player_Team_Label', 'Selection_Type'])['FG_PCT'].mean().reset_index()
    
    if (selected_player_no != 'All Players' and selected_player_no != 'No Opponent') or (selected_opponent_player_no != 'All Players' and selected_opponent_player_no != 'No Opponent'):
        top_fg_pct_players = avg_fg_pct_per_player[
            ((avg_fg_pct_per_player['Player_Team_Label'].str.contains(f"Player {selected_player_no} ({selected_team})")) |
             (avg_fg_pct_per_player['Player_Team_Label'].str.contains(f"Player {selected_opponent_player_no} ({selected_opponent_team})")))
        ].copy()
        title_suffix = "(Selected Players Comparison)"
    else:
        top_fg_pct_players = avg_fg_pct_per_player.sort_values(by='FG_PCT', ascending=False).head(10)
        title_suffix = "(Overall Top 10, Team-Specific)"

    if not top_fg_pct_players.empty:
        # Extract Player No. and Team for hue in this plot, if Player_Team_Label is the primary key
        # This extraction needs to be careful, as 'Player_Team_Label' now also contains 'Selection_Type'
        top_fg_pct_players['Player No.'] = top_fg_pct_players['Player_Team_Label'].apply(lambda x: x.split(' ')[1].replace('(','').replace(')',''))
        top_fg_pct_players['Team'] = top_fg_pct_players['Player_Team_Label'].apply(lambda x: x.split('(')[-1].replace(')',''))

        fig_fg_pct, ax_fg_pct = plt.subplots(figsize=(12, 7))
        if (selected_player_no != 'All Players' and selected_player_no != 'No Opponent') or \
           (selected_opponent_player_no != 'All Players' and selected_opponent_player_no != 'No Opponent'):
            sns.barplot(x='Player_Team_Label', y='FG_PCT', hue='Selection_Type', data=top_fg_pct_players, palette=selection_comparison_palette, ax=ax_fg_pct)
            ax_fg_pct.set_xlabel('Player (Team)')
        else:
            sns.barplot(x='Player No.', y='FG_PCT', hue='Team', data=top_fg_pct_players, palette=team_color_palette, dodge=True, ax=ax_fg_pct)
            ax_fg_pct.set_xlabel('Player Number')
        
        ax_fg_pct.set_title(f'Top Players by Average Field Goal Percentage {title_suffix}')
        ax_fg_pct.set_ylabel('Average Field Goal Percentage')
        plt.xticks(rotation=45, ha='right')
        ax_fg_pct.legend(title="Team/Selection", bbox_to_anchor=(1.05, 1), loc='upper left')
        st.pyplot(fig_fg_pct)
        plt.close(fig_fg_pct)
    else:
        st.info(f"No data available to generate Top Players by Average Field Goal Percentage plot {title_suffix}.")
else:
    st.info("Required columns for Top Players by Average Field Goal Percentage plot are missing or data is empty.")

# --- NEW VISUALIZATIONS FOR WS AND VORP ---

# 8. Top 10 Players by Average Simplified Win Shares (WS_Simplified)
st.subheader("Top Players by Average Simplified Win Shares")
if 'Player_Team_Label' in plot_data_advanced.columns and 'Avg_WS_Simplified' in plot_data_advanced.columns and not plot_data_advanced.empty:
    plot_data_advanced['Avg_WS_Simplified'] = pd.to_numeric(plot_data_advanced['Avg_WS_Simplified'], errors='coerce').fillna(0)

    if (selected_player_no != 'All Players' and selected_player_no != 'No Opponent') or (selected_opponent_player_no != 'All Players' and selected_opponent_player_no != 'No Opponent'):
        players_to_plot = plot_data_advanced[
            ((plot_data_advanced['Player No.'] == selected_player_no) & (plot_data_advanced['Team'] == selected_team)) |
            ((plot_data_advanced['Player No.'] == selected_opponent_player_no) & (plot_data_advanced['Team'] == selected_opponent_team))
        ].copy()
        title_suffix = "(Selected Players Comparison)"
    else:
        players_to_plot = plot_data_advanced.sort_values(by='Avg_WS_Simplified', ascending=False).head(10)
        title_suffix = "(Overall Top 10, Team-Specific)"

    if not players_to_plot.empty:
        fig_ws, ax_ws = plt.subplots(figsize=(12, 7))
        if (selected_player_no != 'All Players' and selected_player_no != 'No Opponent') or \
           (selected_opponent_player_no != 'All Players' and selected_opponent_player_no != 'No Opponent'):
            sns.barplot(x='Player_Team_Label', y='Avg_WS_Simplified', hue='Selection_Type', data=players_to_plot, palette=selection_comparison_palette, ax=ax_ws)
            ax_ws.set_xlabel('Player (Team)')
        else:
            sns.barplot(x='Player No.', y='Avg_WS_Simplified', hue='Team', data=players_to_plot, palette=team_color_palette, dodge=True, ax=ax_ws)
            ax_ws.set_xlabel('Player Number')
        
        ax_ws.set_title(f'Top Players by Average Simplified Win Shares {title_suffix}')
        ax_ws.set_ylabel('Average Simplified Win Shares')
        plt.xticks(rotation=45, ha='right')
        ax_ws.legend(title="Team/Selection", bbox_to_anchor=(1.05, 1), loc='upper left')
        st.pyplot(fig_ws)
        plt.close(fig_ws)
    else:
        st.info(f"No data available to generate Top Players by Average Simplified Win Shares plot {title_suffix}.")
else:
    st.info("Required columns for Top Players by Average Simplified Win Shares plot are missing or data is empty.")

# 9. Top 10 Players by Average Simplified VORP (Value Over Replacement Player)
st.subheader("Top Players by Average Simplified VORP")
if 'Player_Team_Label' in plot_data_advanced.columns and 'Avg_VORP_Simplified' in plot_data_advanced.columns and not plot_data_advanced.empty:
    plot_data_advanced['Avg_VORP_Simplified'] = pd.to_numeric(plot_data_advanced['Avg_VORP_Simplified'], errors='coerce').fillna(0)

    if (selected_player_no != 'All Players' and selected_player_no != 'No Opponent') or (selected_opponent_player_no != 'All Players' and selected_opponent_player_no != 'No Opponent'):
        players_to_plot = plot_data_advanced[
            ((plot_data_advanced['Player No.'] == selected_player_no) & (plot_data_advanced['Team'] == selected_team)) |
            ((plot_data_advanced['Player No.'] == selected_opponent_player_no) & (plot_data_advanced['Team'] == selected_opponent_team))
        ].copy()
        title_suffix = "(Selected Players Comparison)"
    else:
        players_to_plot = plot_data_advanced.sort_values(by='Avg_VORP_Simplified', ascending=False).head(10)
        title_suffix = "(Overall Top 10, Team-Specific)"

    if not players_to_plot.empty:
        fig_vorp, ax_vorp = plt.subplots(figsize=(12, 7))
        if (selected_player_no != 'All Players' and selected_player_no != 'No Opponent') or \
           (selected_opponent_player_no != 'All Players' and selected_opponent_player_no != 'No Opponent'):
            sns.barplot(x='Player_Team_Label', y='Avg_VORP_Simplified', hue='Selection_Type', data=players_to_plot, palette=selection_comparison_palette, ax=ax_vorp)
            ax_vorp.set_xlabel('Player (Team)')
        else:
            sns.barplot(x='Player No.', y='Avg_VORP_Simplified', hue='Team', data=players_to_plot, palette=team_color_palette, dodge=True, ax=ax_vorp)
            ax_vorp.set_xlabel('Player Number')
        
        ax_vorp.set_title(f'Top Players by Average Simplified VORP {title_suffix}')
        ax_vorp.set_ylabel('Average Simplified VORP')
        plt.xticks(rotation=45, ha='right')
        ax_vorp.legend(title="Team", bbox_to_anchor=(1.05, 1), loc='upper left')
        st.pyplot(fig_vorp)
        plt.close(fig_vorp)
    else:
        st.info(f"No data available to generate Top Players by Average Simplified VORP plot {title_suffix}.")
else:
    st.info("Required columns for Top Players by Average Simplified VORP plot are missing or data is empty.")


# --- Team Comparison Analysis ---
if (selected_team != 'All Teams' and selected_player_no == 'All Players' and
    selected_opponent_team != 'No Opponent' and selected_opponent_player_no == 'All Players'):
    
    st.header(f"Team Comparison: {selected_team} vs {selected_opponent_team}")

    # Calculate average advanced stats for each team
    team1_avg_advanced_stats = filtered_df_advanced_primary.mean(numeric_only=True)
    team2_avg_advanced_stats = filtered_df_advanced_opponent.mean(numeric_only=True)

    # Expected Win Probability
    eff1 = team1_avg_advanced_stats.get('Avg_Efficiency', 0)
    eff2 = team2_avg_advanced_stats.get('Avg_Efficiency', 0)
    
    if eff1 + eff2 > 0:
        win_prob_your_team = (eff1 / (eff1 + eff2)) * 100
        win_prob_opponent_team = 100 - win_prob_your_team
    else:
        win_prob_your_team = 50.0
        win_prob_opponent_team = 50.0
    
    st.subheader("Expected Win Probability (Based on Average Efficiency)")
    st.markdown(f"--- *This is a simplified model based solely on average efficiency from available data, not historical win/loss records.* ---")
    
    prob_col1, prob_col2 = st.columns(2)
    with prob_col1:
        st.metric(f"Likelihood for {selected_team}", f"{win_prob_your_team:.2f}%")
    with prob_col2:
        st.metric(f"Likelihood for {selected_opponent_team}", f"{win_prob_opponent_team:.2f}%")

    st.subheader("Strength and Weakness Comparison (Average per Player)")
    
    # Metrics to compare in the grouped bar chart - Added WS and VORP
    comparison_metrics = [
        'Avg_Efficiency',
        'Avg_TS_Percentage',
        'Avg_REB_Percentage',
        'Avg_AST_TOV_Ratio',
        'Avg_WS_Simplified',
        'Avg_VORP_Simplified'
    ]

    # Create a DataFrame for plotting
    plot_df_comparison = pd.DataFrame({
        'Metric': comparison_metrics,
        selected_team: [team1_avg_advanced_stats.get(m, 0) for m in comparison_metrics],
        selected_opponent_team: [team2_avg_advanced_stats.get(m, 0) for m in comparison_metrics]
    })
    
    # Melt the DataFrame for Seaborn's barplot
    plot_df_melted = plot_df_comparison.melt(id_vars='Metric', var_name='Team', value_name='Value')

    # Create the grouped bar chart
    fig_team_comp, ax_team_comp = plt.subplots(figsize=(12, 7))
    sns.barplot(x='Metric', y='Value', hue='Team', data=plot_df_melted, palette=team_color_palette, ax=ax_team_comp)
    
    ax_team_comp.set_title(f'Average Advanced Metrics Comparison: {selected_team} vs {selected_opponent_team}')
    ax_team_comp.set_ylabel('Average Value')
    ax_team_comp.set_xlabel('Metric')
    plt.xticks(rotation=45, ha='right')
    ax_team_comp.legend(title='Team')
    plt.tight_layout()
    st.pyplot(fig_team_comp)
    plt.close(fig_team_comp)
